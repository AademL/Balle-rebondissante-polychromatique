/**

#define DEBUG   

#include <FastLED.h> // http://librarymanager/All#FASTLED
#include "kxtj3-1057.h" // http://librarymanager/All#kxtj3-1057


#define HIGH_RESOLUTION


#define KXTJ3_DEBUG Serial

#include "kxtj3-1057.h"
#include "Wire.h"

float   sampleRate = 12.5;  
uint8_t accelRange = 4;     

KXTJ3 myIMU(0x0E); 


#define DATA_PIN    4
#define LED_TYPE    WS2811
#define COLOR_ORDER GRB
#define NUM_LEDS    21
CRGB leds[NUM_LEDS];

#define BRIGHTNESS          16
#define FRAMES_PER_SECOND  120



uint8_t gHue = 0; 



void setup()
{

  Serial.begin(115200);
  delay(1000);

  FastLED.setBrightness(BRIGHTNESS);

  if( myIMU.begin(sampleRate, accelRange) != 0 )
  {
    // Serial.print("Failed to initialize IMU.\n");
  }
  else
  {
   // Serial.print("IMU initialized.\n");
  }

  // Detection threshold, movement duration and polarity
  myIMU.intConf(123, 1, 10, HIGH);

  uint8_t readData = 0;

  // Get the ID:
  myIMU.readRegister(&readData, KXTJ3_WHO_AM_I);



  // Graph setting
  Serial.println("X_axis:,Y_axis:,Z_axis:");   // Plot labels
 // Serial.println("Min:-1,Max:1");   // Set min max

}


void loop()
{
  myIMU.standby( false );
  int16_t dataHighres = 0;
  float dataG = 0;
  if( myIMU.readRegisterInt16( &dataHighres, KXTJ3_OUT_X_L ) == 0 ){}

  #ifdef DEBUG
  dataG = (float)accelRange * dataHighres/32768;
  Serial.print(dataG);
    #endif
  int offset = accelRange * dataHighres/3000; 
if( myIMU.readRegisterInt16( &dataHighres, KXTJ3_OUT_Y_L ) == 0 ){}
  #ifdef DEBUG
  Serial.print(" ");
  dataG = (float)accelRange * dataHighres/32768;
  Serial.print(dataG);
  #endif
  int color = accelRange * dataHighres/6000;

 if( myIMU.readRegisterInt16( &dataHighres, KXTJ3_OUT_Z_L ) == 0 ){}
  #ifdef DEBUG
  Serial.print(" ");
  dataG = (float)accelRange * dataHighres/32768;
  Serial.println(dataG);
  #endif 

  myIMU.standby( true );

  
  fadeToBlackBy( leds, NUM_LEDS, 10);
  //fade_video( leds, NUM_LEDS, 20);
  //int pos = beatsin16( 13, 0, NUM_LEDS-1 )+offset;
  int pos = 10-offset;
  if(pos==0){ pos = 1;}
  leds[pos] += CHSV( gHue, 255, 192);

  
  FastLED.show();
  
  FastLED.delay(1000/FRAMES_PER_SECOND); 
  
  EVERY_N_MILLISECONDS( 50 ) { gHue=gHue+color; }

  delay(10);

}
